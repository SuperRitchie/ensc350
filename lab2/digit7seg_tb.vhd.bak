LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

LIBRARY WORK;
USE WORK.ALL;

ENTITY digit7seg_tb IS
END digit7seg_tb;

ARCHITECTURE behavior OF digit7seg_tb IS

    COMPONENT digit7seg
        PORT(
            digit : IN  UNSIGNED(3 DOWNTO 0);
            seg7 : OUT STD_LOGIC_VECTOR(6 DOWNTO 0)
        );
    END COMPONENT;

    SIGNAL digit : UNSIGNED(3 DOWNTO 0);
    SIGNAL seg7 : STD_LOGIC_VECTOR(6 DOWNTO 0);

    TYPE test_case_record IS RECORD
        input_digit : UNSIGNED(3 DOWNTO 0);
        expected_output : STD_LOGIC_VECTOR(6 DOWNTO 0);
    END RECORD;

    TYPE test_case_array IS ARRAY (natural range <>) OF test_case_record;

    CONSTANT test_cases : test_case_array := (
        (x"0", "0000001"), -- 0
        (x"1", "1001111"), -- 1
        (x"2", "0010010"), -- 2
        (x"3", "0000110"), -- 3
        (x"4", "1001100"), -- 4
        (x"5", "0100100"), -- 5
        (x"6", "0100000"), -- 6
        (x"7", "0001111"), -- 7
        (x"8", "0000000"), -- 8
        (x"9", "0000100"), -- 9
        (x"A", "0001000"), -- A
        (x"B", "1100000"), -- b
        (x"C", "0110001"), -- C
        (x"D", "1000010"), -- d
        (x"E", "0110000"), -- E
        (x"F", "0111000")  -- F
    );

BEGIN

    UUT: digit7seg PORT MAP (
        digit => digit,
        seg7 => seg7
    );

    TEST : PROCESS
    BEGIN
        FOR i IN test_cases'RANGE LOOP
            digit <= test_cases(i).input_digit;
            WAIT FOR 10 ns; -- Wait time for simulation, adjust as needed
            
            ASSERT seg7 = test_cases(i).expected_output
            REPORT "Mismatch for input " & INTEGER'image(to_integer(test_cases(i).input_digit)) &
                   ": expected " & std_logic_vector'image(test_cases(i).expected_output) &
                   ", got " & std_logic_vector'image(seg7)
            SEVERITY ERROR;

        END LOOP;

        REPORT "All tests passed.";
        WAIT;
    END PROCESS;

END behavior;
