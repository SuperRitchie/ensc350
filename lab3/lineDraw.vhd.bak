library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity lineDraw is
  port (
    clk : in std_logic;	-- clock 50
	 startX : in signed(7 downto 0);
	 startY : in signed(7 downto 0);
	 endX : in signed(7 downto 0);
	 endY : in signed(7 downto 0);
	 startDrawing : in std_logic; -- release this with a register to trigger a start
    --color : in std_logic_vector(2 downto 0);
	 --color : out std_logic_vector(2 downto 0);
	 x : out std_logic_vector(7 downto 0);
	 y : out std_logic_vector(6 downto 0);
    draw : out std_logic;
	 finished : out std_logic
  );
end lineDraw ; 

architecture logic of lineDraw is
	signal dx, dy, absdx, absdy, i1, i2, d, xInt, yInt, xEnd, yEnd : signed(8 downto 0);
	type state is (idle, start, stop);
begin

process(clk)
begin 
	dx <= endX - startX;
	dy <= endY - startY;
	absdx <= ABS(dx);
	absdy <= ABS(dy);
	
	xInt <= startX;
	yInt <= startY;
		
	if rising_edge(clk) then
		
		case state is 
			when idle => 
				if (startDrawing = '1') then
					state <= start;
				end if;
				
				if absdx > absdy then
					d <= (absdy << 1) - absdx;
				else
					d <= (absdx << 1) - absdy;
				end if;
				draw <= '0';
				finished <= '0';
			when start =>
				if xInt = endX and yInt = endY then
					state <= idle;
					finished <= '1';
				else
					if absdx > absdy then
						xInt <= xInt - 1 when dx < '0000000' else xInt + 1;
						if d < '0000000' then
							d <= d + (absdy << 1);
						else
							yInt <= yInt - 1 when dy < '0000000' else yInt + 1;
							d <= d + (absdy << 1) - (absdx << 1);
						end if;
					else 
						yInt <= yInt - 1 when dy < '0000000' else yInt + 1;
						if d < '0000000' then
							d <= d + (absdx << 1);
						else
							xInt <= xInt - 1 when dx < '0000000' else xInt + 1;
							d <= d + (absdx << 1) - (absdy << 1);
						end if;
					end if;
				end if;
				x <= std_logic_vector(to_unsigned(xInt));
				y <= std_logic_vector(to_unsigned(yInt));
				draw <= '1';
				finished <= '0';
		end case;

	
end process;
end architecture;